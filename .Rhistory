library(stringdist)
## Read in terrANTAlife data
terrantalife <- read_csv(here(shared_data, "biodiversity", "terrANTAlife.csv")) %>%
dplyr::filter(taxonRank == "SPECIES") %>%
arrange(ScientificName)
terrantalife <- read_csv(here("terrANTAlife_upd.csv"))
here()
terrantalife <- read_csv("C:/Users/dcla0021/Documents/postdoc/projects/sampling_plan/terrANTAlife_upd.csv")
terrantalife <- read_csv("C:/Users/dcla0021/Documents/postdoc/projects/sampling_plan/data/terrANTAlife_upd.csv")
taxon_df <- read_csv("C:/Users/dcla0021/Documents/postdoc/projects/sampling_plan/data/taxon_df.csv")
View(terrantalife)
plot(log1p(terrantalife$keyCounts), log1p(terrantalife$nameCounts))
(terrantalife_count_diff <-  terrantalife %>%
filter(keyCounts != nameCounts))
head(terrantalife_count_diff)
terrantalife_count_diff %>% dplyr::select(usageKey, ScientificName, keyCounts, nameCounts)
length(which(is.na(terrantalife$usageKey)))
43*2799162795
format(43*2799162795, scientific=F)
120 420 143 188 - 120364000185
120420143188 - 120364000185
taxon_df
taxon_terr_df <- terrantalife %>%
dplyr::select(usageKey, ScientificName, keyCounts, nameCounts) %>%
right_join(taxon_df, by = c("ScientificName" = "verbatim_name")) %>%
mutate(nameDist = stringdist::stringdist(ScientificName, canonicalName)) %>%
relocate(canonicalName, .after = ScientificName) %>%
relocate(nameDist, .after = canonicalName) %>%
relocate(usageKey.y, .after = ScientificName) %>%
relocate(status, matchType, .after = canonicalName) %>%
relocate(acceptedUsageKey, .after = matchType)
taxon_terr_df
gg <- taxon_terr_df %>% filter(nameDist > 0)
gg
taxon_terr_df %>% filter(ScientificName == "Achnanthes molli")
View(taxon_terr_df)
taxon_terr_df %>% filter(ScientificName == "Achnanthes mollis")
View(taxon_terr_df)
occ_count(2630696)
occ_count(taxonKey = 2630696)
which(taxon_terr_df$usageKey.x == 2630696)
name_backbone("Lepraria neglecta", verbose = T)
occ_count(taxonKey = 6017317)
taxon_terr_df %>% filter(ScientificName == "Paecilomyces variotti")
taxon_terr_df %>% filter(ScientificName == "Petriophtydeus tilbrooki")
q <- taxon_terr_df %>% filter(ScientificName == "Petriophtydeus tilbrooki")
View(q)
occ_count(taxonKey = 6927034)
q1 <- terrantalife %>% filter(ScientificName == "Petriophtydeus tilbrooki")
q2 <- taxon_df %>% filter(canonicalName == "Pretriophtydeus tilbrooki")
View(q2)
View(q1)
terrantalife %>% filter(usageKey < 100)
occ_count(taxonKey = 9383821)
q <- taxon_terr_df %>% filter(nameDist > 0)
View(q)
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom", "readxl",
"terrainr", "ENMTools","gstat","automap","intamap","RColorBrewer",
"janitor")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
pth <- "C:/Users/dcla0021/Documents/postdoc/projects/sampling_plan/data"
## User defined functions
source("R/01_functions.R")
## Load Bunger Hills coastline
ant_coast_bh <- st_read(here(shared_data,
"environmental",
"rock_outcrop_bunger_hills",
"Bunger_Hills_Polygon_Burton_Johnson2.shp")) %>%
st_transform(3031)
salts <- st_read(here(pth, "environmental", "bh_salts.shp"))
sedex <- st_read(here(pth, "environmental", "bh_sedex.shp"))
weather <- st_read(here(pth, "environmental", "bh_weather.shp"))
grain <- st_read(here(pth, "environmental", "bh_grain.shp"))
bh_coast <- ant_coast_bh_utm %>%
st_crop(st_bbox(st_buffer(salts, 4000)))
## Transform coast to UTM
ant_coast_bh_utm <- st_transform(ant_coast_bh, 32747)
bh_coast <- ant_coast_bh_utm %>%
st_crop(st_bbox(st_buffer(salts, 4000)))
## Make a grid for use in interpolation
grid <- st_make_grid(bh_coast, cellsize = 100, what = "centers") %>%
st_intersection(bh_coast) %>%
as_Spatial()
## Following is required for universal kriging
grid.df <- as(grid, "SpatialPointsDataFrame")
# length is number of features
grid.df@data <- data.frame(SampleID = c(seq(1:length(grid.df@coords[,1]))),
mineral = c(seq(1:length(grid.df@coords[,1]))),
amount = c(seq(1:length(grid.df@coords[,1]))),
units = c(seq(1:length(grid.df@coords[,1]))),
logamount = c(seq(1:length(grid.df@coords[,1]))))
############################### Chloride #######################################
chl.sp <- SedEx.sp[SedEx.sp$mineral == "Chloride",]
SedEx.sp <- as_Spatial(sedex)
SedEx.sp[297,3] <- 0 #change NA to zero
SedEx.sp@data <- data.frame(SedEx.sp@data,
logamount = log(SedEx.sp@data$amount),
asinhamount = asinh((SedEx.sp@data$amount)),
sqrtamount = sqrt(SedEx.sp@data$amount))
############################### Chloride #######################################
chl.sp <- SedEx.sp[SedEx.sp$mineral == "Chloride",]
chl.sp <- subset(chl.sp, amount > 0)
#below is required if not using st_jitter()
zd <- zerodist(chl.sp)
chl.sp <- chl.sp[-zd[,2], ]
variogram.log.uk <- intamap::estimateAnisotropy(chl.sp,
depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
variogram.log.uk
#need to account for anisotropy
dir.log.uk <- 90 - variogram.log.uk$direction
ratio.log.uk <- 1/variogram.log.uk$ratio
diag <- sqrt((diff(range(chl.sp@coords[,1])))^2 + (diff(range(chl.sp@coords[,2])))^2)
vgm.log.uk <- variogram(logamount ~ coords.x1+coords.x2, chl.sp)
psill.uk <- (max(vgm.log.uk$gamma) + median(vgm.log.uk$gamma))/2
range.uk <- 0.1 * diag
nugget.uk <- min(vgm.log.uk$gamma)
vgm.log.uk.2 <- variogram(logamount ~ coords.x1+coords.x2, chl.sp, alpha = 40)
model.log.uk <- fit.variogram(vgm.log.uk.2,
vgm(psill.uk,
"Gau",
range.uk,
nugget.uk,
anis = c(dir.log.uk, ratio.log.uk)))
g2 <- gstat(formula = logamount~coords.x1+coords.x2,
model = model.log.uk,
data = chl.sp)
z2 <- predict(g2, grid.df)
z2@data[,3] <- exp(z2@data[,1])
colnames(z2@data)[3] <- "back.trans"
#Cross-validation
cv2 <- gstat.cv(g2)
rmse2 <- sqrt(sum((cv2$var1.pred - cv2$observed)^2) / nrow(cv2))
b2 <- bubble(cv2[, "residual"],
maxsize = 2,
main = paste0("Chloride residuals"," (RMSE = ", round(rmse2,2),")"))
hist(cv2[,"residual"]@data$residual)
chl_krig_rs_z <- terra::rasterize(vect(z2),
ref_rast,
field = "var1.pred")
## now to rasterize
ref_rast <- rast(ext = ext(vect(grid)),
resolution = c(100,100),
crs = "epsg:32747")
chl_krig_rs_z <- terra::rasterize(vect(z2),
ref_rast,
field = "var1.pred")
chl_var_krig_rs_z <- terra::rasterize(vect(z2),
ref_rast,
field = "var1.var")
chl_back_krig_rs_z <- terra::rasterize(vect(z2),
ref_rast,
field = "back.trans")
pth
writeRaster(chl_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_chl_inter_pred.tif"),
overwrite = T)
writeRaster(chl_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_chl_inter_var.tif"),
overwrite = T)
writeRaster(chl_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_chl_inter_back.tif"),
overwrite = T)
con.sp <- SedEx.sp[SedEx.sp$mineral == "sedimentConductivity",]
# con.sp[is.na(con.sp$distance)] <- 0
con.sp <- subset(con.sp, amount > 0)
# below is required if not using st_jitter()
zd <- zerodist(con.sp)
con.sp <- con.sp[-zd[,2], ]
# Check anisotropy
intamap::estimateAnisotropy(con.sp,
depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
# no need to account for anisotropy
vario.fit.1 <- automap::autofitVariogram(logamount~coords.x1+coords.x2,
con.sp)
g1 <- gstat(formula = logamount~coords.x1+coords.x2,
model = vario.fit.1$var_model,
data = con.sp)
z1 <- predict(g1, grid.df)
z1@data[,3] <- exp(z1@data[,1])
colnames(z1@data)[3] <- "back.trans"
# Cross-validation
cv1 <- gstat.cv(g1)
# Root Mean Square Error (RMSE)
rmse1 <- sqrt(sum((cv1$var1.pred - cv1$observed)^2) / nrow(cv1))
b1 <- bubble(cv1[, "residual"],
maxsize = 2,
main = paste0("Sediment conductivity residuals"," (RMSE = ",
round(rmse1,2),")"))
hist(cv1[,"residual"]@data$residual)
## now to rasterize
ref_rast <- rast(ext = ext(vect(grid)),
resolution = c(100,100),
crs = "epsg:32747")
con_krig_rs_z <- terra::rasterize(vect(z1),
ref_rast,
field = "var1.pred")
con_var_krig_rs_z <- terra::rasterize(vect(z1),
ref_rast,
field = "var1.var")
con_back_krig_rs_z <- terra::rasterize(vect(z1),
ref_rast,
field = "back.trans")
writeRaster(con_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sedcon_inter_pred.tif"),
overwrite = T)
writeRaster(con_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sedcon_inter_var.tif"),
overwrite = T)
writeRaster(con_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sedcon_inter_back.tif"),
overwrite = T)
plot(chl_back_krig_rs_z)
sod.sp <- SedEx.sp[SedEx.sp$mineral == "Sodium",]
sod.sp <- subset(sod.sp, amount > 0)
#below is required if not using st_jitter()
zd <- zerodist(sod.sp)
sod.sp <- sod.sp[-zd[,2], ]
#Check anisotropy
intamap::estimateAnisotropy(sod.sp,
depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
#no need to account for anisotropy
vario.fit.3 <- automap::autofitVariogram(logamount~coords.x1+coords.x2,
sod.sp)
g3 <- gstat(formula = logamount~coords.x1+coords.x2,
model = vario.fit.3$var_model,
data = sod.sp)
z3 <- predict(g3, grid.df)
z3@data[,3] <- exp(z3@data[,1])
colnames(z3@data)[3] <- "back.trans"
#Cross-validation
cv3 <- gstat.cv(g3)
#Root Mean Square Error (RMSE)
rmse3 <- sqrt(sum((cv3$var1.pred - cv3$observed)^2) / nrow(cv3))
b3 <- bubble(cv3[, "residual"],
maxsize = 2,
main = paste0("Sodium residuals"," (RMSE = ", round(rmse3,2),")"))
hist(cv3[,"residual"]@data$residual)
#now to rasterize
sod_krig_rs_z <- terra::rasterize(vect(z3),
ref_rast,
field = "var1.pred")
sod_var_krig_rs_z <- terra::rasterize(vect(z3),
ref_rast,
field = "var1.var")
sod_back_krig_rs_z <- terra::rasterize(vect(z3),
ref_rast,
field = "back.trans")
writeRaster(sod_krig_rs_z,
filename = file.path("Data",
"Environmental",
"soil_interpolated",
"BH_sod_inter_pred.tif"),
overwrite = T)
writeRaster(sod_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sod_inter_pred.tif"),
overwrite = T)
writeRaster(sod_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sod_inter_var.tif"),
overwrite = T)
writeRaster(sod_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_sod_inter_back.tif"),
overwrite = T)
mag.sp <- SedEx.sp[SedEx.sp$mineral == "Magnesium",]
mag.sp <- subset(mag.sp, amount > 0)
#below is required if not using st_jitter()
zd <- zerodist(mag.sp)
mag.sp <- mag.sp[-zd[,2], ]
#Check anisotropy
#Need to account for anisotropy
variogram.log.uk <- intamap::estimateAnisotropy(mag.sp, depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
dir.log.uk <- 90 - variogram.log.uk$direction
ratio.log.uk <- 1/variogram.log.uk$ratio
variogram.sqrt.uk <- intamap::estimateAnisotropy(mag.sp, depVar = "sqrtamount",
formula = "sqrtamount ~ coords.x1+coords.x2")
dir.sqrt.uk <- 90 - variogram.sqrt.uk$direction
ratio.sqrt.uk <- 1/variogram.sqrt.uk$ratio
variogram.asinh.uk <- intamap::estimateAnisotropy(mag.sp, depVar = "asinhamount",
formula = "asinhamount ~ coords.x1+coords.x2")
dir.asinh.uk <- 90 - variogram.asinh.uk$direction
ratio.asinh.uk <- 1/variogram.asinh.uk$ratio
variogram.uk <- intamap::estimateAnisotropy(mag.sp, depVar = "amount",
formula = "amount ~ coords.x1+coords.x2")
dir.uk <- 90 - variogram.uk$direction
ratio.uk <- 1/variogram.uk$ratio
diag <- sqrt((diff(range(mag.sp@coords[,1])))^2 + (diff(range(mag.sp@coords[,2])))^2)
vgm.asinh.uk <- variogram(asinhamount ~ coords.x1+coords.x2, mag.sp, alpha = 40)
psill.uk <- (max(vgm.asinh.uk$gamma) + median(vgm.asinh.uk$gamma))/2
range.uk <- 0.1 * diag
nugget.uk <- min(vgm.asinh.uk$gamma)
model.asinh.uk <- fit.variogram(vgm.asinh.uk,
vgm(psill.uk,
"Gau",
range.uk,
nugget.uk,
anis = c(dir.asinh.uk, ratio.asinh.uk)))
g4 <- gstat(formula = asinhamount~coords.x1+coords.x2,
model = model.asinh.uk,
data = mag.sp)
z4 <- predict(g4, grid.df)
z4@data[,3] <- sinh(z4@data[,1])
colnames(z4@data)[3] <- "back.trans"
#Cross-validation
cv4 <- gstat.cv(g4)
#Root Mean Square Error (RMSE)
rmse4 <- sqrt(sum((cv4$var1.pred - cv4$observed)^2) / nrow(cv4))
b4 <- bubble(cv4[, "residual"],
maxsize = 2,
main = paste0("Magnesium residuals"," (RMSE = ", round(rmse4,2),")"))
hist(cv4[,"residual"]@data$residual)
#now to rasterize
mag_krig_rs_z <- terra::rasterize(vect(z4),
ref_rast,
field = "var1.pred")
mag_var_krig_rs_z <- terra::rasterize(vect(z4),
ref_rast,
field = "var1.var")
mag_back_krig_rs_z <- terra::rasterize(vect(z4),
ref_rast,
field = "back.trans")
writeRaster(mag_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_mag_inter_pred.tif"),
overwrite = T)
writeRaster(mag_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_mag_inter_var.tif"),
overwrite = T)
writeRaster(mag_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_mag_inter_back.tif"),
overwrite = T)
pot.sp <- SedEx.sp[SedEx.sp$mineral == "Potassium",]
pot.sp <- subset(pot.sp, amount > 0)
#below is required if not using st_jitter()
zd <- zerodist(pot.sp)
pot.sp <- pot.sp[-zd[,2], ]
#Check anisotropy
intamap::estimateAnisotropy(pot.sp,
depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
#no need to account for anisotropy
vario.fit.5 <- automap::autofitVariogram(logamount~coords.x1+coords.x2,
pot.sp)
g5 <- gstat(formula = logamount~coords.x1+coords.x2,
model = vario.fit.5$var_model,
data = pot.sp)
z5 <- predict(g5, grid.df)
z5@data[,3] <- exp(z5@data[,1])
colnames(z5@data)[3] <- "back.trans"
#Cross-validation
cv5 <- gstat.cv(g5)
#Root Mean Square Error (RMSE)
rmse5 <- sqrt(sum((cv5$var1.pred - cv5$observed)^2) / nrow(cv5))
b5 <- bubble(cv5[, "residual"],
maxsize = 2,
main = paste0("Potassium residuals"," (RMSE = ", round(rmse5,2),")"))
hist(cv5[,"residual"]@data$residual)
#now to rasterize
pot_krig_rs_z <- terra::rasterize(vect(z5),
ref_rast,
field = "var1.pred")
pot_var_krig_rs_z <- terra::rasterize(vect(z5),
ref_rast,
field = "var1.var")
pot_back_krig_rs_z <- terra::rasterize(vect(z5),
ref_rast,
field = "back.trans")
writeRaster(pot_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_pot_inter_pred.tif"),
overwrite = T)
writeRaster(pot_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_pot_inter_var.tif"),
overwrite = T)
writeRaster(pot_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_pot_inter_back.tif"),
overwrite = T)
cal.sp <- SedEx.sp[SedEx.sp$mineral == "Calcium",]
cal.sp <- subset(cal.sp, amount > 0)
#below is required if not using st_jitter()
zd <- zerodist(cal.sp)
cal.sp <- cal.sp[-zd[,2], ]
#Check anisotropy
intamap::estimateAnisotropy(cal.sp,
depVar = "logamount",
formula = "logamount ~ coords.x1+coords.x2")
#no need to account for anisotropy
vario.fit.6 <- automap::autofitVariogram(logamount~coords.x1+coords.x2,
cal.sp)
g6 <- gstat(formula = logamount~coords.x1+coords.x2,
model = vario.fit.6$var_model,
data = cal.sp)
z6 <- predict(g6, grid.df)
z6@data[,3] <- exp(z6@data[,1])
colnames(z6@data)[3] <- "back.trans"
#Cross-validation
cv6 <- gstat.cv(g6)
#Root Mean Square Error (RMSE)
rmse6 <- sqrt(sum((cv6$var1.pred - cv6$observed)^2) / nrow(cv6))
b6 <- bubble(cv6[, "residual"],
maxsize = 2,
main = paste0("Calcium residuals"," (RMSE = ", round(rmse6,2),")"))
hist(cv6[,"residual"]@data$residual)
#now to rasterize
cal_krig_rs_z <- terra::rasterize(vect(z6),
ref_rast,
field = "var1.pred")
cal_var_krig_rs_z <- terra::rasterize(vect(z6),
ref_rast,
field = "var1.var")
cal_back_krig_rs_z <- terra::rasterize(vect(z6),
ref_rast,
field = "back.trans")
writeRaster(cal_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_cal_inter_pred.tif"),
overwrite = T)
writeRaster(cal_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_cal_inter_var.tif"),
overwrite = T)
writeRaster(cal_back_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_cal_inter_back.tif"),
overwrite = T)
grain.sp <- as_Spatial(BH_Grain_sf)
grain.sp <- as_Spatial(grain)
#Check anisotropy
intamap::estimateAnisotropy(grain.sp,
depVar = "medGrainSize",
formula = "medGrainSize ~ coords.x1+coords.x2")
grain
#Check anisotropy
intamap::estimateAnisotropy(grain.sp,
depVar = "mdGrnSz",
formula = "mdGrnSz ~ coords.x1+coords.x2")
vario.fit.7 <- automap::autofitVariogram(medGrainSize~coords.x1+coords.x2,
grain.sp)
vario.fit.7 <- automap::autofitVariogram(mdGrnSz~coords.x1+coords.x2,
grain.sp)
g7 <- gstat(formula = mdGrnSz~coords.x1+coords.x2,
model = vario.fit.7$var_model,
data = grain.sp)
z7 <- predict(g7, grid.df)
#Cross-validation
cv7 <- gstat.cv(g7)
#Root Mean Square Error (RMSE)
rmse7 <- sqrt(sum((cv7$var1.pred - cv7$observed)^2) / nrow(cv7))
b7 <- bubble(cv7[, "residual"],
maxsize = 2,
main = paste0("Grain size residuals"," (RMSE = ", round(rmse7,2),")"))
hist(cv7[,"residual"]@data$residual)
#now to rasterize
grain_krig_rs_z <- terra::rasterize(vect(z7),
ref_rast,
field = "var1.pred")
grain_var_krig_rs_z <- terra::rasterize(vect(z7),
ref_rast,
field = "var1.var")
writeRaster(grain_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_grain_inter_pred.tif"),
overwrite = T)
writeRaster(grain_var_krig_rs_z,
filename = file.path(pth,
"environmental",
"BH_grain_inter_var.tif"),
overwrite = T)
#Table of errors
error_df <- data.frame(Property = c(unique(SedEx.sp$mineral), names(grain.sp)),
Transformation = c("log", "asin", "log", "log", "log", "log", "none"),
RMSE = c(rmse3, rmse4, rmse2, rmse5, rmse6, rmse1, rmse7))
write.table(error_df, file.path(pth,
"environmental",
"interpolation_rmse_df.txt"))
ggpubr::ggarrange(b1,b2,b3,b4,b5,b6,b7, nrow = 4, ncol = 2)
