at <- vec2dtransf::AffineTransformation(cpoints)
vec2dtransf::calculateParameters(at)
assign("at", at, envir = spDigit)
rev.cpoints <- as.data.frame(cbind(refPoints, mapPoints))
rev.at <- vec2dtransf::AffineTransformation(rev.cpoints)
vec2dtransf::calculateParameters(rev.at)
assign("rev.at", rev.at, envir = spDigit)
}
check <-
function()
### Displays the image with a reference grid for a final check.
{
if (is.null(spDigit$mapTrans)) transformMap()
# check if desired resolution is lower than available
spcX <- as.numeric(tclvalue(spDigit$spacingX))
spcY <- as.numeric(tclvalue(spDigit$spacingY))
bb <- bbox(spDigit$mapTrans)
res <- spDigit$mapTrans@grid@cellsize
if (spcX < res[1] | spcY < res[2]) {
msg <- paste0("The desired resolution (", spcX, ", ", spcY, ") is ",
"lower than the available resolution in the image (",
res[1], ", ", res[2], "). Choose a lower grid spacing or ",
"use an image with more resolution.")
answer <- tk_messageBox(type = "ok", message=msg)
} else {
# Tweak colors for rgb displayMap
col <- as.factor(rgb(spDigit$mapTrans@data / 255))
rgb <- data.frame(band1=as.numeric(col))
coordinates(rgb) <- coordinates(spDigit$mapTrans)
gridded(rgb) <- TRUE
image(rgb, col=levels(col))
bb <- bb - bb%%1
# Quick&dirty way to find the second grid spacing
secgrd <- 10
if (diff(bb[1,]) > 360 | diff(bb[2,]) > 180) {
secgrd <- 1000
}
bb2 <- bb - bb%%secgrd
abline(v=seq(bb[1,1], bb[1,2], spcX), col='gray')
abline(h=seq(bb[2,1], bb[2,2], spcY), col='gray')
abline(v=seq(bb2[1,1], bb2[1,2], secgrd), col='orange')
abline(h=seq(bb2[2,1], bb2[2,2], secgrd), col='orange')
points(spDigit$mapSpPoints, cex=0.5, pch=16, col='blue')
}
}
controlPoints <-
function()
### Ask the input of n reference points in the map by the user
### where n is the number of control points found in the file.
{
n <- nrow(spDigit$refPoints)
displayMap()
assign("mapPoints", as.data.frame(locator(n)),
envir = spDigit)
calcTransform()
displayMap()
}
cpDefault <-
function()
### Sets the default control points file if present in "path"
{
cpfile <- file.path(spDigit$workdir, "ControlPoints.txt")
if (file.exists(cpfile)) {
tclvalue(spDigit$cpFile) <- basename(cpfile)
cpRead(cpfile)
}
}
cpDialog <-
function(){
### File dialog to open and read a Control Points table file
fileName <- tclvalue(tkgetOpenFile())
if (!nchar(fileName)) {
tkmessageBox(message = "No file was selected!")
} else {
tclvalue(spDigit$cpFile) <- basename(fileName)
cpRead(fileName)
}
}
cpRead <-
function(cpfile)
### Reads the contents of a control points file
{
cp <- read.table(cpfile, sep = ";", header = TRUE)
if (ncol(cp) < 2) {
tkmessageBox(message = paste("The control points file must have at",
"least 2 columns with X and Y.\nCheck the",
"if the separator is \";\" and if the",
"file has a header"))
} else if (nrow(cp) < 4) {
tkmessageBox(message = paste("The control points file must have at",
"least 4 reference points."))
} else {
assign("refPoints", cp[,1:2], envir = spDigit)
}
}
displayMap <-
function() {
### Displays a map in the screen with RGB colors
if (!is.null(spDigit$image)) {
if (is.null(dev.list())) dev.new(xpos=302)
par(mar=rep(0,4))
image(spDigit$image, red=1, green=2, blue=3)
if (!is.null(spDigit$mapPoints))
points(spDigit$mapPoints, col='red', pch=4, cex=3)
}
}
getColor <-
function(){
### Interactive input of a species distinct color to detect points.
img <- as(spDigit$image, "SpatialGridDataFrame")
displayMap() # elimate points from repeated attempts
refcol <- locator(1)
refcol <- as.data.frame(refcol)
coordinates(refcol) <- ~x+y
rcol <- over(refcol, img)
th <- as.integer(tclvalue(spDigit$thres))
#b1 <- img$band1 >= rcol[1,]-th & img$band1 <= rcol[1,]+th
b1 <- img[["bh_1"]] >= rcol[1,]-th & img[["bh_1"]] <= rcol[1,]+th
#b2 <- img$band2 >= rcol[2,]-th & img$band2 <= rcol[2,]+th
#b3 <- img$band3 >= rcol[3,]-th & img$band3 <= rcol[3,]+th
imgSpPoints <- as.data.frame(coordinates(img)[b1,])
#imgSpPoints <- as.data.frame(coordinates(img)[b1 & b2 & b3,])
assign("imgSpPoints", imgSpPoints, envir = spDigit)
points(imgSpPoints, cex=0.6, pch=16)
getSpPoints()
}
getSpPoints <-
function(){
# Detects unique points based on the real coordiantes and plots
imgSpPoints <- spDigit$imgSpPoints
coordinates(imgSpPoints) <- ~s1+s2
mapTransPoints <- applyTransformation(spDigit$at, imgSpPoints)
mapTransPoints <- coordinates(mapTransPoints)
mapSpPoints <- grdCenter(mapTransPoints)
colnames(mapSpPoints) <- c("x", "y")
assign("mapSpPoints",  mapSpPoints, envir = spDigit)
coordinates(mapSpPoints) <- ~x+y
imgSpPoints <- applyTransformation(spDigit$rev.at, mapSpPoints)
assign("imgSpPoints", imgSpPoints, envir = spDigit)
imgSpPoints <- coordinates(imgSpPoints)
points(imgSpPoints, cex=0.6, pch=16, col='red')
}
grdCenter <-
function(x, unique=TRUE)
### centers a table of coordinates in relation to the grid X and Y spacing
### 'x' is a two column table with x and y coords (order matters)
### if 'unique' is true, returns only unique coordinates
{
spacX <- as.numeric(tclvalue(spDigit$spacingX))
spacY <- as.numeric(tclvalue(spDigit$spacingY))
x[,1] <- x[,1] - x[,1] %% spacX + spacX/2
x[,2] <- x[,2] - x[,2] %% spacY + spacY/2
if (unique) {
x <- unique(x)
}
return(as.data.frame(x))
}
imgDialog <-
function()
### Opens a file dialog for map image selection by the user
### It read the map as raster to the environment an tries to set the
### default control points file if found in the same folder.
{
fileName <- tclvalue(tkgetOpenFile())
if (!nchar(fileName)) {
tkmessageBox(message = "No file was selected!")
} else {
tclvalue(spDigit$mapFile) <- basename(fileName)
assign("workdir", dirname(fileName), envir = spDigit)
cpDefault()
assign("pathImage", fileName, envir = spDigit)
assign("image", raster::raster(fileName, silent = TRUE),
envir = spDigit)
assign("mapTrans", NULL, envir = spDigit)
}
}
rm.points <-
function()
### Allows to remove points during the final check
### Left mouse button to remove and right to terminate!
{
rm.pnt <- as.data.frame(locator())
rm.pnt <- grdCenter(rm.pnt)
points <- spDigit$mapSpPoints
for (j in 1:nrow(rm.pnt)) {
pnt <- rm.pnt[j,]
i <- which(points$x == pnt$x & points$y == pnt$y)
if (length(i) > 0) points <- points[-i,]
}
assign("mapSpPoints", points, envir = spDigit)
check()
}
speciesdigitizer <- function() {
initspDigit()
## GUI
tt <- tktoplevel()
tkwm.geometry(tt, "300x325+1+1")
tkwm.title(tt, "Species Digitizer")
tkwm.resizable(tt, FALSE, FALSE)
## #### Load file buttons #### ##
imgFileFrame <- tkframe(tt)
file.but <- tkbutton(imgFileFrame, text = "Image file",
width = 10, command = function() imgDialog())
file.lbl <- tklabel(imgFileFrame, foreground = "gray40",
width = 20, textvariable = spDigit$mapFile)
tkgrid(file.but, file.lbl)
tkgrid(imgFileFrame)
cpFileFrame <- tkframe(tt)
cpFile.but <- tkbutton(cpFileFrame, text = "Control points",
width = 10, command = function() cpDialog())
cpFile.lbl <- tklabel(cpFileFrame, foreground = "gray40",
width = 20, textvariable = spDigit$cpFile)
tkgrid(cpFile.but, cpFile.lbl)
tkgrid(cpFileFrame)
## #### Display/Control points #### ##
cPointsFrame <- tkframe(tt, borderwidth = 2, relief = "ridge", pady=1)
show.but <- tkbutton(cPointsFrame, text = "Show image", width = 15,
command = function() displayMap())
cp.but <- tkbutton(cPointsFrame, text = "Set Control Points", width = 15,
command = function() controlPoints())
tkgrid(show.but, cp.but)
tkgrid(cPointsFrame, pady=10)
## #### Color picker #### ##
colFrame <- tkframe(tt, borderwidth = 2, relief = "ridge")
spac.lbl <- tklabel(colFrame, text = "Grid spacing")
spacX.lbl <- tklabel(colFrame, text = "X:")
spacX.entry <- tkentry(colFrame, width = 3, textvariable = spDigit$spacingX)
spacY.lbl <- tklabel(colFrame, text = "Y:")
spacY.entry <- tkentry(colFrame, width = 3, textvariable = spDigit$spacingY)
thres.lbl <- tklabel(colFrame, text = "Color threshold")
thres.entry <- tkentry(colFrame, width = 3, textvariable = spDigit$thres)
col.but <- tkbutton(colFrame, text = "Point color",
command = function() getColor())
tkgrid(spac.lbl, spacX.lbl, spacX.entry, spacY.lbl, spacY.entry)
tkgrid(thres.lbl, thres.entry, columnspan=4)
tkgrid(col.but, columnspan=5)
tkgrid(colFrame)
## #### Final Check #### ##
spFrame <- tkframe(tt)
check.but <- tkbutton(spFrame, text = "Final check",
command = function() check())
add.but <- tkbutton(spFrame, text = "+",
command = function()  add.points())
rm.but <- tkbutton(spFrame, text = "-",
command = function() rm.points())
tkgrid(check.but, add.but, rm.but)
tkgrid(spFrame, pady = 10)
## #### Write file #### ##
world.but <- tkcheckbutton(tt, text = "Write georeferenced map?",
variable = spDigit$savemap , onvalue = 1, offvalue = 0)
write.but <- tkbutton(tt, text = "Write file",
command = function() writedata())
tkgrid(world.but)
tkgrid(write.but)
tkfocus(tt)
}
transformMap <-
function()
### Georeferences the whole image to display with grid
{
img <- as(spDigit$image, "SpatialGridDataFrame")
imgPoints <- data.frame(coordinates(img), img@data)
coordinates(imgPoints) <- ~s1+s2
mapTrans <- applyTransformation(spDigit$at, imgPoints)
# Transform the grid by adjusting each cell to the expected centroid on the
# average spatial resolution on each axis
#sz <- spDigit$image@grid@cells.dim
sz <- img@grid@cells.dim
crd <- coordinates(mapTrans)
resX <- diff(range(crd[,1]))/sz[1]
resY <- diff(range(crd[,2]))/sz[2]
crd[,1] <- crd[,1]-crd[,1]%%resX + resX/2
crd[,2] <- crd[,2]-crd[,2]%%resY + resY/2
dt <- mapTrans@data
coordinates(dt) <- crd
gridded(dt) <- TRUE
assign("mapTrans", dt, envir = spDigit)
}
writedata <-
function(){
### Writes species data to file
fileName <- tclvalue(tkgetSaveFile(filetypes = "{text {.txt}}"))
if (!nchar(fileName)) {
tkmessageBox(message = "No file was selected!")
} else {
write.table(spDigit$mapSpPoints, fileName, row.names=FALSE,
col.names = TRUE, sep = ';', quote = FALSE)
## Save georeferenced map
if (tclvalue(spDigit$savemap) == "1") {
## Copy map image with world file.
baseName <- strsplit(fileName, "\\.")[[1]]
baseName <- paste(baseName[-length(baseName)], collapse = ".")
#writeGDAL(spDigit$mapTrans, paste0(baseName, ".tif"))
writeRaster(rast(spDigit$mapTrans), paste0(baseName, ".tif"))
}
}
}
speciesdigitizer()
imgSpPoints
plot(imgSpPoints)
mapTransPoints
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom",
"RColorBrewer", "readxl", "terrainr")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
bh_coast <- st_read("C:/Users/dcla0021/Documents/postdoc/projects/shared_data/environmental/rock_outcrop_bunger_hills/Bunger_Hills_Polygon_Burton_Johnson2.shp") %>%
st_transform(4326)
plot(bh_coast$geometry)
st_write(bh_coast, here("bunger_hills_wgs84.shp"))
## Load required libraries
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom",
"RColorBrewer", "readxl", "terrainr")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
space <- rast(here("data", "sampling_design", "climate.tif"))
space
plot(space)
strat <- rast(here("data", "sampling_design", "stratification_units.tif"))
rm(space)
plot(strat,
type = "classes",
col = hcl.colors(length(unique(su_rast)[,1]), "spectral"),
plg = list(ncol = 4), mar = c(1.5, 1.5, 1.5, 12))
plot(strat,
type = "classes",
col = hcl.colors(length(unique(strat)[,1]), "spectral"),
plg = list(ncol = 4), mar = c(1.5, 1.5, 1.5, 12))
sites <- st_read(here("data", "sampling_design", "strat_ran_sites.shp"))
plot(sites$geometry, add = T, pch = 16, col = "black")
strat <- project(strat, y = "epsg:4326")
sites <- project(ssites, y = "epsg:4326")
sites <- project(sites, y = "epsg:4326")
sites <- st_transform(sites, 4326)
plot(strat,
type = "classes",
col = hcl.colors(length(unique(strat)[,1]), "spectral"),
plg = list(ncol = 4), mar = c(1.5, 1.5, 1.5, 12))
strat
rm(list = ls())
1092/2037*100
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom",
"RColorBrewer", "readxl", "terrainr")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
gbif_sf <- st_read(here("data", "biodiversity", "gbif", "gbif_ant_sf_min.shp"))
#Cumulative records for all species combined
cumsum_records <- gbif_sf %>%
st_drop_geometry() %>%
arrange(year) %>%
group_by(year) %>%
mutate(year_count = n()) %>%
filter(taxnRnk == "SPECIES") %>%
distinct(year = year, .keep_all = T) %>%
ungroup() %>%
mutate(year_cumsum = cumsum(year_count)) %>%
select(year, year_cumsum, year_count) %>%
mutate(year = as.character(year)) %>%
mutate(phylum = "All") %>%
relocate(phylum, .after = "year")
# Define the number of colors you want
nb.cols <- 21
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
ggplot(data = cumsum_records, aes(x = as.numeric(year),
y = log(year_cumsum),
group = phylum)) +
geom_line(linewidth = 1, aes(colour = phylum, linetype = phylum)) +
scale_color_manual(values = mycolors, name = "Phylum") +
scale_linetype_manual(values = c("solid", "dashed", rep("solid",19)), name = "Phylum") +
theme_bw() +
theme(panel.grid = element_blank()
,legend.position = "none"
) +
scale_y_continuous(expand = c(0,0),
limits = c(0,13)) +
ylab("Cumulative number of GBIF records (log)") +
xlab("Year")
View(cumsum_records)
#Counts of records per phylum per year
gbif_4cumsum <- gbif_sf %>%
st_drop_geometry() %>%
arrange(year) %>%
group_by(year, phylum) %>%
summarise(year_count = n()) %>%
drop_na(phylum) %>%
drop_na(year)
phylums <- unique(gbif_4cumsum$phylum)
my_list <- list()
for(j in 1:length(phylums)){
df <- gbif_4cumsum %>%
ungroup() %>%
filter(phylum == phylums[j]) %>%
mutate(year_cumsum = cumsum(year_count)) %>%
mutate(year = as.character(year))
my_list[[j]] <- df
}
for(i in 1:length(my_list)){
cumsum_records <- cumsum_records %>%
bind_rows(my_list[[i]])
}
ggplot(data = cumsum_records, aes(x = as.numeric(year),
y = log(year_cumsum),
group = phylum)) +
geom_line(linewidth = 1, aes(colour = phylum, linetype = phylum)) +
scale_color_manual(values = mycolors, name = "Phylum") +
scale_linetype_manual(values = c("solid", "dashed", rep("solid",19)), name = "Phylum") +
theme_bw() +
theme(panel.grid = element_blank()
,legend.position = "none"
) +
scale_y_continuous(expand = c(0,0),
limits = c(0,13)) +
ylab("Cumulative number of GBIF records (log)") +
xlab("Year")
View(cumsum_records)
cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000"))
cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000")) %>%
group_by(timePeriod) %>%
summarise(n = sum(year_count))
##
time_periods <- cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000")) %>%
group_by(timePeriod) %>%
summarise(n = sum(year_count))
time_periods
sum(time_periods$n)
View(cumsum_records)
##
time_periods <- cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000")) %>%
filter(phylum == "All") %>%
group_by(timePeriod) %>%
summarise(n = sum(year_count))
sum(time_periods$n)
time_periods
?geom_vline
ggplot(data = cumsum_records, aes(x = as.numeric(year),
y = log(year_cumsum),
group = phylum)) +
geom_line(linewidth = 1, aes(colour = phylum, linetype = phylum)) +
scale_color_manual(values = mycolors, name = "Phylum") +
scale_linetype_manual(values = c("solid", "dashed", rep("solid",19)), name = "Phylum") +
geom_vline(xintercept = c(1960, 2000)) +
theme_bw()
View(cumsum_records)
cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000")) %>%
filter(phylum == "All")
ggplot(data = cumsum_records, aes(x = as.numeric(year),
y = log(year_cumsum),
group = phylum)) +
geom_line(linewidth = 1, aes(colour = phylum, linetype = phylum)) +
scale_color_manual(values = mycolors, name = "Phylum") +
scale_linetype_manual(values = c("solid", "dashed", rep("solid",19)), name = "Phylum") +
geom_vline(xintercept = c(1960, 2000)) +
theme_bw() +
theme(panel.grid = element_blank()
,legend.position = "none"
) +
scale_y_continuous(expand = c(0,0),
limits = c(0,13)) +
ylab("Cumulative number of GBIF records (log)") +
xlab("Year")
time_periods
200249/sum(time_periods$n)*100
cumsum_records %>%
mutate(timePeriod = case_when(year < 1960 ~ "pre-1960",
year >= 1960 & year < 2000 ~ "1960-2000",
year > 2000 ~ "post 2000")) %>%
filter(phylum == "Chordata") %>%
group_by(timePeriod) %>%
summarise(n = sum(year_count))
186171/200249*100
sum(1134,329,398)
install.packages("earthdatalogin")
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom",
"RColorBrewer", "readxl", "terrainr")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
r1 <- rast(here(shared_data, "environmental", "era5", "wind_speed_mean.tif"))
plot(r1)
r1
r1p <- project(r1, y = "epsg:3031")
plot(r1p)
sum(2482,329,139,398)
library(grateful)
cite_packages(out.dir = ".")
install.packages("janitor")
cite_packages(out.format = "docx", out.dir = ".")
sum(2482,329,139,398)
gc()
pkgs <- c("sf","tidyverse","here","terra","rassta", "rgbif", "vroom",
"RColorBrewer", "readxl", "terrainr")
lapply(pkgs, require, character.only = T)
############################### File paths #####################################
shared_data <- "C:/Users/dcla0021/Documents/postdoc/projects/shared_data"
library(renv)
