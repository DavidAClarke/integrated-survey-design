################################################################################
#### Script: Choosing plot locations
#### Paper:
#### Date:
################################################################################

# function args: x = site points, shp = topographic shapefile for intersection,
# nsim = number of simulations, snum = site number, crs (if not given sf object
# for sites), long/lat = coordinate variable names (if not given sf object for
# sites, ncrs = new crs for transforming sites, buff = buffer size around site)

find_samples <- function(x, shp, nsim = 3, snum, long, lat, crs, buff){

  if(nrow(x) != length(snum)) {stop("Number sites and site numbers must be equal")}

  if(class(x)[1] != "sf"){

    x <- st_as_sf(x, coords = c(long,lat), remove = F, crs = crs)

  }

  x <- st_transform(x, st_crs(shp))
  x.buff <- st_intersection(st_buffer(x, buff,nQuadSegs=1,
                                      endCapStyle = "SQUARE"),st_as_sf(shp))

  #set.seed(seed)

  # Plot locations
  sampled_points <- st_sample(
    x = x.buff,
    type = "SSI", #Simple Sequential Inhibition process from spatstat.random
    r = 100, # threshold distance (in metres)
    n = 3, # number of points
    nsim = nsim #number of simulated realisations
  )

  st_crs(sampled_points) <- st_crs(shp)

  if(nsim > 1){

    p <- ggplot() +
      #geom_sf(data = st_crop(st_as_sf(shp), st_buffer(x.buff, 500))) +
      geom_sf(data = x.buff) +
      geom_sf(data = x, size = 2, colour = "black") +
      geom_sf(data = sampled_points, size = 2, mapping = aes(colour = label)) +
      rcartocolor::scale_color_carto_d(name = "Simulation: ", palette = "Safe") +
      theme_void() +
      theme(plot.margin = margin(1,1,2,1, "cm"))

    p2 <- cowplot::ggdraw(p) +
      cowplot::draw_plot(
              {p +
                geom_sf(data = shp) +
                  geom_sf(data = x, colour = "black") +
                  theme(legend.position = "none")
                  },
              x = 0.62,
              y = 0.55,
              # The width and height of the plot expressed as proportion of the entire ggdraw object
              width = 0.4,
              height = 0.4)


    plot(p2)

  }

  if(nsim > 1){

    sim <- readline("Which simulation do you want to use? Use simulation number ")

    plot.ctd <- sampled_points %>%
              filter(label == paste("Simulation",sim)) %>%
              st_cast("POINT") %>%
              mutate(label = paste0(paste0("S",snum),c("P1", "P2", "P3")))

  } else {

    plot.ctd <- sampled_points %>%
                mutate(label = paste0(paste0("S",snum),c("P1", "P2", "P3")))
  }

  # Sample locations
  plots <- st_buffer(plot.ctd, dist = 5, nQuadSegs=1,
                     endCapStyle = "SQUARE")

  plot.pts <- st_as_sf(st_sample(plots, c(3,3,3), by_polygon = T)) %>%
    mutate(site = paste0("S",snum)) %>%
    mutate(plot = c(rep("P1",3), rep("P2", 3), rep("P3",3))) %>%
    mutate(sample = rep(c("s1", "s2", "s3"), 3))

  return(list(x, plots, plot.pts))

}

#### Soil site example
thin_soil_crds <- read.csv(here("data", "sampling_design",
                                "thinned_locations_2.5km.csv - Copy",
                                "BH_sample_sites.csv")) %>%
  mutate(tempName = paste0("S",seq(1:42))) %>%
  rename(Site = "tempName")

pts <- st_as_sf(thin_soil_crds, coords = c("x","y"), remove = F, crs = 4326)
pts.tr <- st_transform(pts, 3031)
site <- st_as_sf(sample(pts.tr$geometry, 1))


#could loop over sites
site.list <- list()

for(i in 1:1){

  plots_samples <- find_samples(pts.tr[i,], ant_coast_bh, nsim = 3, snum = i,
                              crs = 4326, buff = 100)
  site.list[[i]] <- plots_samples
}


